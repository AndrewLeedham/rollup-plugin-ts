import {isClassDeclaration, isEnumDeclaration, isFunctionDeclaration, isInterfaceDeclaration, isTypeAliasDeclaration, isVariableStatement, Node, SourceFile, SyntaxKind} from "typescript";
import {visitVariableStatementWithExportModifier} from "./visit-variable-statement-with-export-modifier";
import {visitFunctionDeclarationWithExportModifier} from "./visit-function-declaration-with-export-modifier";
import {visitTypeAliasDeclarationWithExportModifier} from "./visit-type-alias-declaration-with-export-modifier";
import {visitInterfaceDeclarationWithExportModifier} from "./visit-interface-declaration-with-export-modifier";
import {visitClassDeclarationWithExportModifier} from "./visit-class-declaration-with-export-modifier";
import {visitEnumDeclarationWithExportModifier} from "./visit-enum-declaration-with-export-modifier";
import {IReferenceCache} from "../cache/i-reference-cache";

/**
 * Visits a Node that has an export modifier in front of it. Basically, it will remove it if it isn't
 * included in the actual output of the Chunk generated by Rollup - unless it is referenced by
 * something else within the program
 * @param {Node} node
 * @param {Set<string>} usedExports
 * @param {SourceFile} sourceFile
 * @param {IReferenceCache} cache
 * @returns {Node | undefined}
 */
export function visitNodeWithExportModifier (node: Node, usedExports: Set<string>, sourceFile: SourceFile, cache: IReferenceCache): Node|undefined {

	if (isVariableStatement(node)) {
		return visitVariableStatementWithExportModifier(node, usedExports, sourceFile, cache);
	}
	else if (isFunctionDeclaration(node)) {
		return visitFunctionDeclarationWithExportModifier(node, usedExports, sourceFile, cache);
	}
	else if (isTypeAliasDeclaration(node)) {
		return visitTypeAliasDeclarationWithExportModifier(node, usedExports, sourceFile, cache);
	}
	else if (isInterfaceDeclaration(node)) {
		return visitInterfaceDeclarationWithExportModifier(node, usedExports, sourceFile, cache);
	}
	else if (isClassDeclaration(node)) {
		return visitClassDeclarationWithExportModifier(node, usedExports, sourceFile, cache);
	}
	else if (isEnumDeclaration(node)) {
		return visitEnumDeclarationWithExportModifier(node, usedExports, sourceFile, cache);
	}

	console.log("visitNodeWithExportModifier:", SyntaxKind[node.kind]);

	return node;
}
